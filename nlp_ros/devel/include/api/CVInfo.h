// Generated by gencpp from file api/CVInfo.msg
// DO NOT EDIT!


#ifndef API_MESSAGE_CVINFO_H
#define API_MESSAGE_CVINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace api
{
template <class ContainerAllocator>
struct CVInfo_
{
  typedef CVInfo_<ContainerAllocator> Type;

  CVInfo_()
    : x(0.0)
    , y(0.0)
    , w(0.0)
    , h(0.0)
    , frame_width(0)
    , frame_height(0)
    , score(0.0)  {
    }
  CVInfo_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , w(0.0)
    , h(0.0)
    , frame_width(0)
    , frame_height(0)
    , score(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _w_type;
  _w_type w;

   typedef float _h_type;
  _h_type h;

   typedef uint16_t _frame_width_type;
  _frame_width_type frame_width;

   typedef uint16_t _frame_height_type;
  _frame_height_type frame_height;

   typedef float _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::api::CVInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::api::CVInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CVInfo_

typedef ::api::CVInfo_<std::allocator<void> > CVInfo;

typedef boost::shared_ptr< ::api::CVInfo > CVInfoPtr;
typedef boost::shared_ptr< ::api::CVInfo const> CVInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::api::CVInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::api::CVInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::api::CVInfo_<ContainerAllocator1> & lhs, const ::api::CVInfo_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.w == rhs.w &&
    lhs.h == rhs.h &&
    lhs.frame_width == rhs.frame_width &&
    lhs.frame_height == rhs.frame_height &&
    lhs.score == rhs.score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::api::CVInfo_<ContainerAllocator1> & lhs, const ::api::CVInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace api

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::api::CVInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::api::CVInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::api::CVInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::api::CVInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::api::CVInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::api::CVInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::api::CVInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "99332bc3002971b2c3503a06ab6aa2f6";
  }

  static const char* value(const ::api::CVInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x99332bc3002971b2ULL;
  static const uint64_t static_value2 = 0xc3503a06ab6aa2f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::api::CVInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "api/CVInfo";
  }

  static const char* value(const ::api::CVInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::api::CVInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 w\n"
"float32 h\n"
"uint16 frame_width\n"
"uint16 frame_height\n"
"float32 score\n"
;
  }

  static const char* value(const ::api::CVInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::api::CVInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.w);
      stream.next(m.h);
      stream.next(m.frame_width);
      stream.next(m.frame_height);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CVInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::api::CVInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::api::CVInfo_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
    s << indent << "h: ";
    Printer<float>::stream(s, indent + "  ", v.h);
    s << indent << "frame_width: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.frame_width);
    s << indent << "frame_height: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.frame_height);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // API_MESSAGE_CVINFO_H
