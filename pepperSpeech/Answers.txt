Python question 1:

def generator(n, max_value):
    i = n
    while i <= max_value:
        if i % n == 0:
            yield i
        i += 1

max_value = 102030
n = 3

sum_divisible_by_n = sum(positive_integers_divisible_by_n(n, max_value))

print(f"The sum of all positive integers less than {max_value} which are divisible by {n} is {sum_divisible_by_n}.")


Python Question 2:

def nested_lists(n):
    return [[j for j in range(1, i+1)] for i in range(1, n+1)]


General questions (python):

1) 
def sum_of_even_fib_numbers(a, b, even_sum, even_fib_sum):

    # Calculate the next number in the Fibonacci sequence

    c = a + b

    # If the next number is even, add it to the sum

    if c % 2 == 0:
        even_sum += 1
        even_fib_sum += c

    # If we have found 100 even-valued numbers, return the sum

    if even_sum == 100:
        return even_fib_sum

    # Otherwise, continue the recursion with the next two numbers in the sequence

    else:
        return sum_of_even_fibonacci_numbers(b, c, even_sum, even_fib_sum)

# Call the function with the first two numbers of the Fibonacci sequence and print the result
result = sum_of_even_fibonacci_numbers(1, 1, 0, 0)
print(result)


2)

def find_common_elements(arr1, arr2):
    result = []

    #initiate two pointers

    i = j = 0

    #loop to check if values are equal

    while i < len(arr1) and j < len(arr2):
        if arr1[i] == arr2[j]:
            if not result or arr1[i] != result[-1]:
                result.append(arr1[i])
            i += 1
            j += 1
        #increment the pointer of the array with the lesser value (since they are sorted)

        elif arr1[i] < arr2[j]:
            i += 1
        else:
            j += 1
    return result


3)
def contains_only_even_digits(n):
    if n > 0:
        if n % 2 == 1:
            return False
            n //= 10
        return True
    else:
        return "Number is not positive"

4)
def compute_value(x):
    total = 0
    current = x
    for i in range(4):
        total += current
        current = current * 10 + x
    return total

